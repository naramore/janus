defmodule JanusExamples.XAPI do
  @moduledoc false

  alias Janus.Resolver

  @prefix Citrix.XAPI

  @spec xen_resolvers() :: [Resolver.t()]
  def xen_resolvers do
    resolver_set(VM, [
      :hvm_boot_params,
      :hvm_boot_policy,
      :hvm_shadow_multiplier,
      :nvram,
      :pci_bus,
      :pv_args,
      :pv_bootloader,
      :pv_bootloader_args,
      :pv_kernel,
      :pv_legacy_args,
      :pv_ramdisk,
      %{:vbds => [{VBD, :opaque_reference}]},
      :vcpus_at_startup,
      :vcpus_max,
      :vcpus_params,
      %{:vgpus => [{VGPU, :opaque_reference}]},
      %{:vifs => [{VIF, :opaque_reference}]},
      %{:vtpms => [{VTPM, :opaque_reference}]},
      %{:vusbs => [{VUSB, :opaque_reference}]},
      :actions_after_crash,
      :actions_after_reboot,
      :actions_after_shutdown,
      %{:affinity => [{Host, :opaque_reference}]},
      :allowed_operations,
      %{:appliance => [{VMAppliance, :opaque_reference}]},
      %{:attached_pcis => [{PCI, :opaque_reference}]},
      :bios_strings,
      %{:blobs => [:blob_name, {Blob, :opaque_reference}]},
      :blocked_operations,
      %{:children => [:opaque_reference]},
      %{:consoles => [{Console, :opaque_reference}]},
      %{:crash_dumps => [{Crashdump, :opaque_reference}]},
      :current_operations,
      :domain_type,
      :domarch,
      :domid,
      :generation_id,
      %{:guest_metrics => [{VM.GuestMetrics, :opaque_reference}]},
      :ha_always_run,
      :ha_restart_policy,
      :hardware_platform_version,
      :has_vendor_device,
      :is_a_snapshot,
      :is_a_template,
      :is_control_domain,
      :is_default_template,
      :is_snapshot_from_vmpp,
      :is_vmss_snapshot,
      :last_boot_cpu_flags,
      :last_booted_record,
      :memory_dynamic_max,
      :memory_dynamic_min,
      :memory_overhead,
      :memory_static_max,
      :memory_static_min,
      :memory_target,
      %{:metrics => [{VM.Metrics, :opaque_reference}]},
      :name_description,
      :name_label,
      :order,
      :other_config,
      %{:parent => [:opaque_reference]},
      :platform,
      :power_state,
      %{:protection_policy => [{VMPP, :opaque_reference}]},
      :recommendations,
      :reference_label,
      :requires_reboot,
      %{:resident_on => [{Host, :opaque_reference}]},
      %{:scheduled_to_be_resident_on => [{Host, :opaque_reference}]},
      :shutdown_delay,
      :snapshot_info,
      :snapshot_metadata,
      %{:snapshot_of => [:opaque_reference]},
      %{:snapshot_schedule => [{VMSS, :opaque_reference}]},
      :snapshot_time,
      %{:snapshots => [:opaque_reference]},
      :start_delay,
      %{:suspend_sr => [{SR, :opaque_reference}]},
      %{:suspend_vdi => [:opaque_reference]},
      :tags,
      :transportable_snapshot_id,
      :user_version,
      :uuid,
      :version,
      :xenstore_data
    ])
    |> resolvers_set(VIF, [
      :mac,
      :mac_autogenerated,
      :mtu,
      %{:vm => [{VM, :opaque_reference}]},
      :allowed_operations,
      :current_operations,
      :currently_attached,
      :device,
      :ipv4_addresses,
      :ipv4_allowed,
      :ipv4_configuration_mode,
      :ipv4_gateway,
      :ipv6_addresses,
      :ipv6_allowed,
      :ipv6_configuration_mode,
      :ipv6_gateway,
      :locking_mode,
      %{:metrics => [{VIF.Metrics, :opaque_reference}]},
      %{:network => [{Network, :opaque_reference}]},
      :other_config,
      :qos_algorithm_params,
      :qos_algorithm_type,
      :qos_supported_algorithms,
      :runtime_properties,
      :status_code,
      :status_detail,
      :uuid
    ])
    |> resolvers_set(Network, [
      :uuid,
      :mtu,
      %{:vifs => [{VIF, :opaque_reference}]},
      %{:pifs => [{PIF, :opaque_reference}]},
      %{:assigned_ips => [:ip_address, {VIF, :opaque_reference}]},
      %{:blobs => [:blob_name, {Blob, :opaque_reference}]},
      :bridge,
      :name_description,
      :name_label,
      :tags,
      :purpose,
      :other_config,
      :managed,
      :current_operations,
      :default_locking_mode
    ])
    |> resolvers_set(PIF, [
      :dns,
      :ip,
      :ipv6,
      :mac,
      :mtu,
      %{:pci => [{PCI, :opaque_reference}]},
      :vlan,
      %{:vlan_master_of => [{VLAN, :opaque_reference}]},
      %{:vlan_slave_of => [{VLAN, :opaque_reference}]},
      %{:bond_master_of => [{Bond, :opaque_reference}]},
      %{:bond_slave_of => [{Bond, :opaque_reference}]},
      :capabilities,
      :currently_attached,
      :device,
      :disallow_unplug,
      :gateway,
      %{:host => [{Host, :opaque_reference}]},
      :igmp_snooping_status,
      :ip_configuration_mode,
      :ipv6_configuration_mode,
      :ipv6_gateway,
      :managed,
      :management,
      %{:metrics => [{PIF.Metrics, :opaque_reference}]},
      :netmask,
      %{:network => [{Network, :opaque_reference}]},
      :other_config,
      :physical,
      :primary_address_type,
      :properties,
      %{:sriov_logical_pif_of => [{Network.SRIOV, :opaque_reference}]},
      %{:sriov_physical_pif_of => [{Network.SRIOV, :opaque_reference}]},
      %{:tunnel_access_pif_of => [{Tunnel, :opaque_reference}]},
      %{:tunnel_transport_pif_of => [{Tunnel, :opaque_reference}]},
      :uuid
    ])
    |> resolvers_set(VBD, [
      %{:vdi => [:opaque_reference]},
      %{:vm => [{VM, :opaque_reference}]},
      :allowed_operations,
      :bootable,
      :current_operations,
      :currently_attached,
      :device,
      :empty,
      %{:metrics => [{VBD.Metrics, :opaque_reference}]},
      :mode,
      :other_config,
      :qos_algorithm_params,
      :qos_algorithm_type,
      :qos_supported_algorithms,
      :runtime_properties,
      :status_code,
      :status_detail,
      :storage_lock,
      :type,
      :unpluggable,
      :userdevice,
      :uuid
    ])
    |> resolvers_set(VDI, [
      %{:sr => [{SR, :opaque_reference}]},
      %{:vbds => [{VBD, :opaque_reference}]},
      :allow_caching,
      :allowed_operations,
      :cbt_enabled,
      %{:crash_dumps => [{Crashdump, :opaque_reference}]},
      :current_operations,
      :is_a_snapshot,
      :is_tools_iso,
      :location,
      :managed,
      :metadata_latest,
      %{:metadata_of_pool => [{Pool, :opaque_reference}]},
      :missing,
      :name_description,
      :name_label,
      :on_boot,
      :other_config,
      %{:parent => [:opaque_reference]},
      :physical_utilisation,
      :read_only,
      :sharable,
      :sm_config,
      %{:snapshot_of => [:opaque_reference]},
      :snapshot_time,
      %{:snapshots => [:opaque_reference]},
      :storage_lock,
      :tags,
      :type,
      :uuid,
      :virtual_size,
      :xenstore_data
    ])
    |> resolvers_set(SR, [
      %{:pbds => [{PBD, :opaque_reference}]},
      %{:vdis => [{VDI, :opaque_reference}]},
      :allowed_operations,
      %{:blobs => [:blob_name, {Blob, :opaque_reference}]},
      :clustered,
      :content_type,
      :current_operations,
      %{:introduced_by => [{DR.Task, :opaque_reference}]},
      :is_tools_sr,
      :local_cache_enabled,
      :name_description,
      :name_label,
      :other_config,
      :physical_size,
      :physical_utilisation,
      :shared,
      :sm_config,
      :tags,
      :type,
      :uuid,
      :virtual_allocation
    ])
    |> resolvers_set(PBD, [
      :uuid,
      :device_config,
      :other_config,
      :currently_attached,
      %{:host => [{Host, :opaque_reference}]},
      %{:sr => [{SR, :opaque_reference}]}
    ])
    |> resolvers_set(Host, [
      :api_version_major,
      :api_version_minor,
      :api_version_vendor,
      :api_version_vendor_implementation,
      %{:pbds => [{PBD, :opaque_reference}]},
      %{:pcis => [{PCI, :opaque_reference}]},
      %{:pgpus => [{PGPU, :opaque_reference}]},
      %{:pifs => [{PIF, :opaque_reference}]},
      %{:pusbs => [{PUSB, :opaque_reference}]},
      :address,
      :allowed_operations,
      :bios_strings,
      %{:blobs => [:blob_name, {Blob, :opaque_reference}]},
      :capabilities,
      %{:certificates => [{Certificate, :opaque_reference}]},
      :chipset_info,
      %{:control_domain => [{VM, :opaque_reference}]},
      :cpu_configuration,
      :cpu_info,
      %{:crash_dump_sr => [{SR, :opaque_reference}]},
      %{:crashdumps => [{Host.Crashdump, :opaque_reference}]},
      :current_operations,
      :display,
      :edition,
      :editions,
      :enabled,
      :external_auth_configuration,
      :external_auth_service_name,
      :external_auth_type,
      %{:features => [{Feature, :opaque_reference}]},
      :guest_vcpus_params,
      :ha_network_peers,
      :ha_statefiles,
      %{:host_cpus => [{Host.CPU, :opaque_reference}]},
      :hostname,
      :iscsi_iqn,
      :license_params,
      :license_server,
      %{:local_cache_sr => [{Sr, :opaque_reference}]},
      :logging,
      :memory_overhead,
      %{:metrics => [{Host.Metrics, :opaque_reference}]},
      :multipathing,
      :name_description,
      :name_label,
      :other_config,
      %{:patches => [{Host.Patch, :opaque_reference}]},
      :power_on_config,
      :power_on_mode,
      %{:resident_vms => [{VM, :opaque_reference}]},
      :sched_policy,
      :software_version,
      :ssl_legacy,
      :supported_bootloaders,
      %{:suspend_image_sr => [{SR, :opaque_reference}]},
      :tags,
      :uefi_certificates,
      %{:updates => [{Pool.Update, :opaque_reference}]},
      %{:update_requiring_reboot => [{Pool.Update, :opaque_reference}]},
      :uuid,
      :virtual_hardware_platform_versions
    ])
    |> resolvers_set(Session, [
      :uuid,
      :auth_user_name,
      :auth_user_sid,
      :is_local_superuser,
      :other_config,
      :last_active,
      :validation_time,
      :originator,
      :pool,
      :rbac_permissions,
      %{:parent => [:opaque_reference]},
      %{:tasks => [{Task, :opaque_reference}]},
      %{:this_host => [{Host, :opaque_reference}]},
      %{:this_user => [{User, :opaque_reference}]},
      %{:subject => [{Subject, :opaque_reference}]}
    ])

    # |> resolvers_set(Auth, [])
    # |> resolvers_set(Blob, [])
    # |> resolvers_set(Bond, [])
    # |> resolvers_set(Certificate, [])
    # |> resolvers_set(Cluster, [])
    # |> resolvers_set(Cluster.Host, [])
    # |> resolvers_set(Console, [])
    # |> resolvers_set(Crashdump, [])
    # |> resolvers_set(Data.Source, [])
    # |> resolvers_set(DR.Task, [])
    # |> resolvers_set(Event, [])
    # |> resolvers_set(Feature, [])
    # |> resolvers_set(GPU.Group, [])
    # |> resolvers_set(Host.CPU, [])
    # |> resolvers_set(Host.Crashdump, [])
    # |> resolvers_set(Host.Metrics, [])
    # |> resolvers_set(Host.Patch, [])
    # |> resolvers_set(LVHD, [])
    # |> resolvers_set(Message, [])
    # |> resolvers_set(Network.SRIOV, [])
    # |> resolvers_set(PCI, [])
    # |> resolvers_set(PGPU, [])
    # |> resolvers_set(PIF.Metrics, [])
    # |> resolvers_set(Pool, [])
    # |> resolvers_set(Pool.Patch, [])
    # |> resolvers_set(Pool.Update, [])
    # |> resolvers_set(Probe.Result, [])
    # |> resolvers_set(PUSB, [])
    # |> resolvers_set(PVS.Cache.Storage, [])
    # |> resolvers_set(PVS.Proxy, [])
    # |> resolvers_set(PVS.Server, [])
    # |> resolvers_set(PVS.Site, [])
    # |> resolvers_set(Role, [])
    # |> resolvers_set(SDN.Controller, [])
    # |> resolvers_set(Secret, [])
    # |> resolvers_set(SM, [])
    # |> resolvers_set(SR.Stat, [])
    # |> resolvers_set(Subject, [])
    # |> resolvers_set(Task, [])
    # |> resolvers_set(Tunnel, [])
    # |> resolvers_set(USB.Group, [])
    # |> resolvers_set(User, [])
    # |> resolvers_set(VBD.Metrics, [])
    # |> resolvers_set(VDI.NBD.Server.Info, [])
    # |> resolvers_set(VGPU, [])
    # |> resolvers_set(VGPU.Type, [])
    # |> resolvers_set(VIF.Metrics, [])
    # |> resolvers_set(VLAN, [])
    # |> resolvers_set(VM.Appliance, [])
    # |> resolvers_set(VM.Guest.Metrics, [])
    # |> resolvers_set(VM.Metrics, [])
    # |> resolvers_set(VMPP, [])
    # |> resolvers_set(VMSS, [])
    # |> resolvers_set(VTPM, [])
    # |> resolvers_set(VUSB, [])
  end

  @spec resolvers_set([Resolver.t()], module, Resolver.output(), module) :: [Resolver.t()]
  def resolvers_set(resovlers, mod, output, prefix \\ @prefix) do
    mod
    |> resolver_set(output, prefix)
    |> :lists.reverse(resovlers)
  end

  @spec resolver_set(module, Resolver.output(), module) :: [Resolver.t()]
  def resolver_set(mod, output, prefix \\ @prefix) do
    resolvers = [
      JanusExamples.resolver(
        prefix({mod, :get_record}, prefix, nil),
        prefix([{mod, :opaque_reference}], prefix, mod),
        prefix(output, prefix, mod)
      ),
      JanusExamples.resolver(
        prefix({mod, :get_by_uuid}, prefix, nil),
        prefix([{mod, :uuid}], prefix, mod),
        prefix([{mod, :opaque_reference}], prefix, mod)
      ),
      JanusExamples.resolver(
        prefix({mod, :get_all}, prefix, nil),
        prefix([], prefix, mod),
        prefix([%{{mod, :all} => [{mod, :opaque_reference}]}], prefix, mod)
      )
    ]

    if Enum.find(output, false, &match?(:name_label, &1)) do
      name_label_resolver =
        JanusExamples.resolver(
          prefix({mod, :get_by_name_label}, prefix, nil),
          prefix([{mod, :name_label}], prefix, mod),
          prefix([{mod, :opaque_reference}], prefix, mod)
        )

      [name_label_resolver | resolvers]
    else
      resolvers
    end
  end

  def prefix([], _, _), do: []
  def prefix([h | t], p, m), do: [prefix(h, p, m) | prefix(t, p, m)]

  def prefix(%{} = join, p, m),
    do: Enum.map(join, fn {k, vs} -> {prefix(k, p, m), prefix(vs, p, m)} end) |> Enum.into(%{})

  def prefix({m, k}, p, _), do: {Module.concat(p, m), k}
  def prefix(k, p, m), do: prefix({m, k}, p, nil)
end
